@page "/expenses"
@using BudgetEase.Core.DTOs
@using BudgetEase.Web.Services
@inject ExpenseService ExpenseService
@inject EventService EventService
@rendermode InteractiveServer

<PageTitle>Expenses - BudgetEase</PageTitle>

<div class="page-header">
    <h1>ðŸ’° Expense Tracking</h1>
    <p>Monitor and categorize all your expenses</p>
</div>

<div class="content-card">
    @if (events.Any())
    {
        <div class="form-group mb-3">
            <label>Select Event</label>
            <select class="form-control" @onchange="OnEventChanged">
                <option value="">-- Select an event --</option>
                @foreach (var evt in events)
                {
                    <option value="@evt.Id">@evt.Name</option>
                }
            </select>
        </div>
    }

    <div class="card-header">
        <h2>Your Expenses</h2>
        <button class="btn btn-primary" @onclick="ToggleCreateForm" disabled="@(selectedEventId == 0)">@(showCreateForm ? "- Cancel" : "+ Add Expense")</button>
    </div>

    @if (showCreateForm && selectedEventId > 0)
    {
        <div class="create-form-section">
            <h3>Add New Expense</h3>
            <form @onsubmit="CreateExpense">
                <div class="form-group">
                    <label>Category</label>
                    <input type="text" class="form-control @GetValidationClass(nameof(newExpense.Category))" @bind="newExpense.Category" />
                    @if (fieldErrors.ContainsKey(nameof(newExpense.Category)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newExpense.Category)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <input type="text" class="form-control @GetValidationClass(nameof(newExpense.Description))" @bind="newExpense.Description" />
                    @if (fieldErrors.ContainsKey(nameof(newExpense.Description)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newExpense.Description)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Estimated Cost</label>
                    <input type="number" class="form-control @GetValidationClass(nameof(newExpense.EstimatedCost))" @bind="newExpense.EstimatedCost" step="0.01" />
                    @if (fieldErrors.ContainsKey(nameof(newExpense.EstimatedCost)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newExpense.EstimatedCost)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Actual Cost</label>
                    <input type="number" class="form-control" @bind="newExpense.ActualCost" step="0.01" />
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Add Expense</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleCreateForm">Cancel</button>
                </div>
            </form>
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center p-4">
            <p>Loading expenses...</p>
        </div>
    }
    else if (selectedEventId == 0)
    {
        <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-receipt" viewBox="0 0 16 16">
                <path d="M1.92.506a.5.5 0 0 1 .434.14L3 1.293l.646-.647a.5.5 0 0 1 .708 0L5 1.293l.646-.647a.5.5 0 0 1 .708 0L7 1.293l.646-.647a.5.5 0 0 1 .708 0L9 1.293l.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .801.13l.5 1A.5.5 0 0 1 15 2v12a.5.5 0 0 1-.053.224l-.5 1a.5.5 0 0 1-.8.13L13 14.707l-.646.647a.5.5 0 0 1-.708 0L11 14.707l-.646.647a.5.5 0 0 1-.708 0L9 14.707l-.646.647a.5.5 0 0 1-.708 0L7 14.707l-.646.647a.5.5 0 0 1-.708 0L5 14.707l-.646.647a.5.5 0 0 1-.708 0L3 14.707l-.646.647a.5.5 0 0 1-.801-.13l-.5-1A.5.5 0 0 1 1 14V2a.5.5 0 0 1 .053-.224l.5-1a.5.5 0 0 1 .367-.27zm.217 1.338L2 2.118v11.764l.137.274.51-.51a.5.5 0 0 1 .707 0l.646.647.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.509.509.137-.274V2.118l-.137-.274-.51.51a.5.5 0 0 1-.707 0L12 1.707l-.646.647a.5.5 0 0 1-.708 0L10 1.707l-.646.647a.5.5 0 0 1-.708 0L8 1.707l-.646.647a.5.5 0 0 1-.708 0L6 1.707l-.646.647a.5.5 0 0 1-.708 0L4 1.707l-.646.647a.5.5 0 0 1-.708 0l-.509-.51z"/>
                <path d="M3 4.5a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm8-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5z"/>
            </svg>
            <h3>Select an event first</h3>
            <p>Choose an event from the dropdown above to track expenses</p>
        </div>
    }
    else if (!expenses.Any())
    {
        <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-receipt" viewBox="0 0 16 16">
                <path d="M1.92.506a.5.5 0 0 1 .434.14L3 1.293l.646-.647a.5.5 0 0 1 .708 0L5 1.293l.646-.647a.5.5 0 0 1 .708 0L7 1.293l.646-.647a.5.5 0 0 1 .708 0L9 1.293l.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .801.13l.5 1A.5.5 0 0 1 15 2v12a.5.5 0 0 1-.053.224l-.5 1a.5.5 0 0 1-.8.13L13 14.707l-.646.647a.5.5 0 0 1-.708 0L11 14.707l-.646.647a.5.5 0 0 1-.708 0L9 14.707l-.646.647a.5.5 0 0 1-.708 0L7 14.707l-.646.647a.5.5 0 0 1-.708 0L5 14.707l-.646.647a.5.5 0 0 1-.708 0L3 14.707l-.646.647a.5.5 0 0 1-.801-.13l-.5-1A.5.5 0 0 1 1 14V2a.5.5 0 0 1 .053-.224l.5-1a.5.5 0 0 1 .367-.27zm.217 1.338L2 2.118v11.764l.137.274.51-.51a.5.5 0 0 1 .707 0l.646.647.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.646.646.646-.646a.5.5 0 0 1 .708 0l.509.509.137-.274V2.118l-.137-.274-.51.51a.5.5 0 0 1-.707 0L12 1.707l-.646.647a.5.5 0 0 1-.708 0L10 1.707l-.646.647a.5.5 0 0 1-.708 0L8 1.707l-.646.647a.5.5 0 0 1-.708 0L6 1.707l-.646.647a.5.5 0 0 1-.708 0L4 1.707l-.646.647a.5.5 0 0 1-.708 0l-.509-.51z"/>
                <path d="M3 4.5a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 1 1 0 1h-6a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5zm8-6a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5z"/>
            </svg>
            <h3>No expenses recorded</h3>
            <p>Start tracking your expenses to manage your budget effectively</p>
        </div>
    }
    else
    {
        <div class="expenses-list">
            @foreach (var expense in expenses)
            {
                <div class="expense-item">
                    <div class="expense-info">
                        <h3>@expense.Category</h3>
                        <p>@expense.Description</p>
                        <p>Estimated: $@expense.EstimatedCost - Actual: $@expense.ActualCost</p>
                        @if (expense.VendorId.HasValue)
                        {
                            <p>Vendor ID: @expense.VendorId</p>
                        }
                    </div>
                    <div class="expense-actions">
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<EventDto> events = new();
    private List<ExpenseDto> expenses = new();
    private int selectedEventId = 0;
    private bool isLoading = false;
    private bool showCreateForm = false;
    private CreateExpenseDto newExpense = new();
    private Dictionary<string, string> fieldErrors = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await EventService.GetAllEventsAsync();
            events = result.ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private async Task OnEventChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var eventId))
        {
            selectedEventId = eventId;
            await LoadExpenses();
            showCreateForm = false;
        }
        else
        {
            selectedEventId = 0;
            expenses.Clear();
            showCreateForm = false;
        }
    }

    private async Task LoadExpenses()
    {
        if (selectedEventId == 0) return;

        isLoading = true;
        try
        {
            var result = await ExpenseService.GetExpensesByEventAsync(selectedEventId);
            expenses = result.ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleCreateForm()
    {
        showCreateForm = !showCreateForm;
        if (showCreateForm)
        {
            newExpense = new CreateExpenseDto
            {
                EventId = selectedEventId,
                ActualCost = 0
            };
            fieldErrors.Clear();
        }
    }

    private async Task CreateExpense()
    {
        fieldErrors.Clear();

        // Client-side validation
        if (string.IsNullOrWhiteSpace(newExpense.Category))
        {
            fieldErrors[nameof(newExpense.Category)] = "Category is required";
        }

        if (string.IsNullOrWhiteSpace(newExpense.Description))
        {
            fieldErrors[nameof(newExpense.Description)] = "Description is required";
        }

        if (newExpense.EstimatedCost <= 0)
        {
            fieldErrors[nameof(newExpense.EstimatedCost)] = "Estimated cost must be greater than zero";
        }

        if (fieldErrors.Any())
        {
            StateHasChanged();
            return;
        }

        try
        {
            await ExpenseService.CreateExpenseAsync(newExpense);
            await LoadExpenses();
            ToggleCreateForm();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private async Task DeleteExpense(int id)
    {
        try
        {
            await ExpenseService.DeleteExpenseAsync(id);
            await LoadExpenses();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private string GetValidationClass(string fieldName)
    {
        return fieldErrors.ContainsKey(fieldName) ? "is-invalid" : "";
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-header h1 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .page-header p {
        color: #666;
        margin: 0;
    }

    .content-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .card-header h2 {
        margin: 0;
        font-size: 1.5rem;
        color: #333;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(245, 87, 108, 0.4);
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #999;
    }

    .empty-state svg {
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: #666;
    }

    .empty-state p {
        color: #999;
    }

    .expenses-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .expense-item {
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .expense-info h3 {
        margin: 0 0 0.5rem 0;
        color: #333;
    }

    .expense-info p {
        margin: 0.25rem 0;
        color: #666;
        font-size: 0.9rem;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-content h3 {
        margin: 0 0 1.5rem 0;
        color: #333;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #f5576c;
    }

    .form-control.is-invalid {
        border-color: #dc3545;
    }

    .form-control.is-invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .create-form-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
    }

    .create-form-section h3 {
        margin: 0 0 1.5rem 0;
        color: #333;
    }
</style>
