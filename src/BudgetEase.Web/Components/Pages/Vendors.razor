@page "/vendors"
@using BudgetEase.Core.DTOs
@using BudgetEase.Web.Services
@inject VendorService VendorService
@inject EventService EventService
@rendermode InteractiveServer

<PageTitle>Vendors - BudgetEase</PageTitle>

<div class="page-header">
    <h1>ðŸ‘¥ Vendor Management</h1>
    <p>Manage your vendor relationships and payment schedules</p>
</div>

<div class="content-card">
    @if (events.Any())
    {
        <div class="form-group mb-3">
            <label>Select Event</label>
            <select class="form-control" @onchange="OnEventChanged">
                <option value="">-- Select an event --</option>
                @foreach (var evt in events)
                {
                    <option value="@evt.Id">@evt.Name</option>
                }
            </select>
        </div>
    }

    <div class="card-header">
        <h2>Your Vendors</h2>
        <button class="btn btn-primary" @onclick="ShowCreateModal" disabled="@(selectedEventId == 0)">+ Add Vendor</button>
    </div>
    
    @if (isLoading)
    {
        <div class="text-center p-4">
            <p>Loading vendors...</p>
        </div>
    }
    else if (selectedEventId == 0)
    {
        <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-people" viewBox="0 0 16 16">
                <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
            </svg>
            <h3>Select an event first</h3>
            <p>Choose an event from the dropdown above to manage vendors</p>
        </div>
    }
    else if (!vendors.Any())
    {
        <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-people" viewBox="0 0 16 16">
                <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
            </svg>
            <h3>No vendors added</h3>
            <p>Add vendors to keep track of services and payment reminders</p>
        </div>
    }
    else
    {
        <div class="vendors-list">
            @foreach (var vendor in vendors)
            {
                <div class="vendor-item">
                    <div class="vendor-info">
                        <h3>@vendor.Name</h3>
                        <p>Service: @vendor.ServiceType</p>
                        <p>Contact: @vendor.ContactNumber</p>
                        @if (!string.IsNullOrEmpty(vendor.Email))
                        {
                            <p>Email: @vendor.Email</p>
                        }
                    </div>
                    <div class="vendor-actions">
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteVendor(vendor.Id)">Delete</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showCreateModal)
{
    <div class="modal-overlay" @onclick="HideCreateModal">
        <div class="modal-content" @onclick:stopPropagation>
            <h3>Add New Vendor</h3>
            <form @onsubmit="CreateVendor">
                <div class="form-group">
                    <label>Vendor Name</label>
                    <input type="text" class="form-control" @bind="newVendor.Name" required />
                </div>
                <div class="form-group">
                    <label>Service Type</label>
                    <input type="text" class="form-control" @bind="newVendor.ServiceType" required />
                </div>
                <div class="form-group">
                    <label>Contact Number</label>
                    <input type="tel" class="form-control" @bind="newVendor.ContactNumber" required />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" class="form-control" @bind="newVendor.Email" />
                </div>
                <div class="form-group">
                    <label>Payment Terms</label>
                    <textarea class="form-control" @bind="newVendor.PaymentTerms" rows="3"></textarea>
                </div>
                <div class="modal-actions">
                    <button type="submit" class="btn btn-primary">Add Vendor</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
}

@code {
    private List<EventDto> events = new();
    private List<VendorDto> vendors = new();
    private int selectedEventId = 0;
    private bool isLoading = false;
    private bool showCreateModal = false;
    private CreateVendorDto newVendor = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await EventService.GetAllEventsAsync();
            events = result.ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private async Task OnEventChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var eventId))
        {
            selectedEventId = eventId;
            await LoadVendors();
        }
        else
        {
            selectedEventId = 0;
            vendors.Clear();
        }
    }

    private async Task LoadVendors()
    {
        if (selectedEventId == 0) return;

        isLoading = true;
        try
        {
            var result = await VendorService.GetVendorsByEventAsync(selectedEventId);
            vendors = result.ToList();
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        newVendor = new CreateVendorDto
        {
            EventId = selectedEventId
        };
        showCreateModal = true;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private async Task CreateVendor()
    {
        try
        {
            await VendorService.CreateVendorAsync(newVendor);
            await LoadVendors();
            HideCreateModal();
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private async Task DeleteVendor(int id)
    {
        try
        {
            await VendorService.DeleteVendorAsync(id);
            await LoadVendors();
        }
        catch (Exception)
        {
            // Handle error
        }
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-header h1 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .page-header p {
        color: #666;
        margin: 0;
    }

    .content-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .card-header h2 {
        margin: 0;
        font-size: 1.5rem;
        color: #333;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(79, 172, 254, 0.4);
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #999;
    }

    .empty-state svg {
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: #666;
    }

    .empty-state p {
        color: #999;
    }

    .vendors-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .vendor-item {
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .vendor-info h3 {
        margin: 0 0 0.5rem 0;
        color: #333;
    }

    .vendor-info p {
        margin: 0.25rem 0;
        color: #666;
        font-size: 0.9rem;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-content h3 {
        margin: 0 0 1.5rem 0;
        color: #333;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #4facfe;
    }

    .modal-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    textarea.form-control {
        resize: vertical;
    }
</style>
