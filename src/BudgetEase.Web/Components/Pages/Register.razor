@page "/register"
@using BudgetEase.Core.DTOs
@using BudgetEase.Web.Services
@inject AuthService AuthService
@inject AuthStateService AuthState
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Register - BudgetEase</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h1>Create Account</h1>
            <p>Start managing your event budgets today</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-error">
                @errorMessage
            </div>
        }

        @if (validationErrors.Any())
        {
            <div class="alert alert-error">
                <ul>
                    @foreach (var error in validationErrors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }

        <form class="auth-form" @onsubmit="HandleRegister">
            <div class="form-group">
                <label>First Name</label>
                <input type="text" class="form-control @GetValidationClass(nameof(registerRequest.FirstName))" 
                       placeholder="Enter your first name" @bind="registerRequest.FirstName" required />
                @if (fieldErrors.ContainsKey(nameof(registerRequest.FirstName)))
                {
                    <span class="validation-message">@fieldErrors[nameof(registerRequest.FirstName)]</span>
                }
            </div>

            <div class="form-group">
                <label>Last Name</label>
                <input type="text" class="form-control @GetValidationClass(nameof(registerRequest.LastName))" 
                       placeholder="Enter your last name" @bind="registerRequest.LastName" required />
                @if (fieldErrors.ContainsKey(nameof(registerRequest.LastName)))
                {
                    <span class="validation-message">@fieldErrors[nameof(registerRequest.LastName)]</span>
                }
            </div>

            <div class="form-group">
                <label>Email</label>
                <input type="email" class="form-control @GetValidationClass(nameof(registerRequest.Email))" 
                       placeholder="Enter your email" @bind="registerRequest.Email" required />
                @if (fieldErrors.ContainsKey(nameof(registerRequest.Email)))
                {
                    <span class="validation-message">@fieldErrors[nameof(registerRequest.Email)]</span>
                }
            </div>

            <div class="form-group">
                <label>Password</label>
                <input type="password" class="form-control @GetValidationClass(nameof(registerRequest.Password))" 
                       placeholder="Create a password (min 6 chars, 1 uppercase, 1 lowercase, 1 digit)" 
                       @bind="registerRequest.Password" required />
                @if (fieldErrors.ContainsKey(nameof(registerRequest.Password)))
                {
                    <span class="validation-message">@fieldErrors[nameof(registerRequest.Password)]</span>
                }
            </div>

            <div class="form-group">
                <label>Confirm Password</label>
                <input type="password" class="form-control @GetValidationClass(nameof(registerRequest.ConfirmPassword))" 
                       placeholder="Confirm your password" @bind="registerRequest.ConfirmPassword" required />
                @if (fieldErrors.ContainsKey(nameof(registerRequest.ConfirmPassword)))
                {
                    <span class="validation-message">@fieldErrors[nameof(registerRequest.ConfirmPassword)]</span>
                }
            </div>

            <div class="form-check">
                <label class="checkbox-label">
                    <input type="checkbox" @bind="agreeToTerms" required />
                    <span>I agree to the Terms of Service and Privacy Policy</span>
                </label>
            </div>

            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Creating Account...</span>
                }
                else
                {
                    <span>Create Account</span>
                }
            </button>
        </form>

        <div class="auth-footer">
            <p>Already have an account? <a href="/login">Sign in</a></p>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new RegisterRequest();
    private bool agreeToTerms = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private List<string> validationErrors = new List<string>();
    private Dictionary<string, string> fieldErrors = new Dictionary<string, string>();

    private async Task HandleRegister()
    {
        errorMessage = "";
        validationErrors.Clear();
        fieldErrors.Clear();

        // Client-side validation
        if (string.IsNullOrWhiteSpace(registerRequest.FirstName))
        {
            fieldErrors[nameof(registerRequest.FirstName)] = "First name is required";
        }

        if (string.IsNullOrWhiteSpace(registerRequest.LastName))
        {
            fieldErrors[nameof(registerRequest.LastName)] = "Last name is required";
        }

        if (string.IsNullOrWhiteSpace(registerRequest.Email))
        {
            fieldErrors[nameof(registerRequest.Email)] = "Email is required";
        }
        else if (!IsValidEmail(registerRequest.Email))
        {
            fieldErrors[nameof(registerRequest.Email)] = "Invalid email format";
        }

        if (string.IsNullOrWhiteSpace(registerRequest.Password))
        {
            fieldErrors[nameof(registerRequest.Password)] = "Password is required";
        }
        else if (registerRequest.Password.Length < 6)
        {
            fieldErrors[nameof(registerRequest.Password)] = "Password must be at least 6 characters";
        }
        else if (!HasUppercase(registerRequest.Password))
        {
            fieldErrors[nameof(registerRequest.Password)] = "Password must contain at least one uppercase letter";
        }
        else if (!HasLowercase(registerRequest.Password))
        {
            fieldErrors[nameof(registerRequest.Password)] = "Password must contain at least one lowercase letter";
        }
        else if (!HasDigit(registerRequest.Password))
        {
            fieldErrors[nameof(registerRequest.Password)] = "Password must contain at least one digit";
        }

        if (string.IsNullOrWhiteSpace(registerRequest.ConfirmPassword))
        {
            fieldErrors[nameof(registerRequest.ConfirmPassword)] = "Password confirmation is required";
        }
        else if (registerRequest.Password != registerRequest.ConfirmPassword)
        {
            fieldErrors[nameof(registerRequest.ConfirmPassword)] = "Passwords do not match";
        }

        if (!agreeToTerms)
        {
            errorMessage = "You must agree to the Terms of Service and Privacy Policy";
            return;
        }

        if (fieldErrors.Any())
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await AuthService.RegisterAsync(registerRequest);

            if (result.Success)
            {
                // Store user info in auth state
                AuthState.Login(result.FirstName ?? result.Email ?? "User");
                
                // Navigate to home/dashboard
                Navigation.NavigateTo("/");
            }
            else
            {
                if (result.Errors != null && result.Errors.Any())
                {
                    validationErrors = result.Errors;
                }
                else
                {
                    errorMessage = result.Message ?? "Registration failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetValidationClass(string fieldName)
    {
        return fieldErrors.ContainsKey(fieldName) ? "is-invalid" : "";
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool HasUppercase(string str) => str.Any(char.IsUpper);
    private bool HasLowercase(string str) => str.Any(char.IsLower);
    private bool HasDigit(string str) => str.Any(char.IsDigit);
}

<style>
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
    }

    .auth-card {
        background: white;
        border-radius: 16px;
        padding: 3rem;
        max-width: 450px;
        width: 100%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .auth-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .auth-header h1 {
        font-size: 2rem;
        font-weight: 700;
        color: #333;
        margin: 0 0 0.5rem 0;
    }

    .auth-header p {
        color: #666;
        margin: 0;
    }

    .auth-form {
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.875rem;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-control.is-invalid {
        border-color: #dc3545;
    }

    .form-control.is-invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
    }

    .alert-error {
        background-color: #f8d7da;
        border: 1px solid #f5c2c7;
        color: #842029;
    }

    .alert-error ul {
        margin: 0;
        padding-left: 1.5rem;
    }

    .alert-error li {
        margin: 0.25rem 0;
    }

    .form-check {
        margin-bottom: 1.5rem;
    }

    .checkbox-label {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
        cursor: pointer;
        color: #666;
        font-size: 0.9rem;
    }

    .checkbox-label input[type="checkbox"] {
        cursor: pointer;
        margin-top: 0.25rem;
    }

    .btn {
        padding: 0.875rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        width: 100%;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-block {
        width: 100%;
    }

    .auth-footer {
        text-align: center;
        padding-top: 1.5rem;
        border-top: 1px solid #e0e0e0;
    }

    .auth-footer p {
        margin: 0;
        color: #666;
    }

    .auth-footer a {
        color: #667eea;
        text-decoration: none;
        font-weight: 600;
    }

    .auth-footer a:hover {
        text-decoration: underline;
    }

    @@media (max-width: 576px) {
        .auth-card {
            padding: 2rem;
        }

        .auth-header h1 {
            font-size: 1.5rem;
        }
    }
</style>
