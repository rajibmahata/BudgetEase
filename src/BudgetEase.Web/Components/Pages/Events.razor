@page "/events"
@using BudgetEase.Core.DTOs
@using BudgetEase.Web.Services
@inject EventService EventService
@rendermode InteractiveServer

<PageTitle>Events - BudgetEase</PageTitle>

<div class="page-header">
    <h1>ðŸ“… Event Management</h1>
    <p>Create and manage your events with budget tracking</p>
</div>

<div class="content-card">
    <div class="card-header">
        <h2>Your Events</h2>
        <button class="btn btn-primary" @onclick="ToggleCreateForm">@(showCreateForm ? "- Cancel" : "+ New Event")</button>
    </div>

    @if (showCreateForm)
    {
        <div class="create-form-section">
            <h3>Create New Event</h3>
            <form @onsubmit="CreateEvent">
                <div class="form-group">
                    <label>Event Name</label>
                    <input type="text" class="form-control @GetValidationClass(nameof(newEvent.Name))" @bind="newEvent.Name" />
                    @if (fieldErrors.ContainsKey(nameof(newEvent.Name)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newEvent.Name)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Event Type</label>
                    <select class="form-control @GetValidationClass(nameof(newEvent.Type))" @bind="newEvent.Type">
                        <option value="">-- Select Event Type --</option>
                        <option value="Marriage">Marriage</option>
                        <option value="Birthday">Birthday</option>
                        <option value="Others">Others</option>
                    </select>
                    @if (fieldErrors.ContainsKey(nameof(newEvent.Type)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newEvent.Type)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Event Date</label>
                    <input type="date" class="form-control @GetValidationClass(nameof(newEvent.EventDate))" @bind="newEvent.EventDate" />
                    @if (fieldErrors.ContainsKey(nameof(newEvent.EventDate)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newEvent.EventDate)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Venue</label>
                    <input type="text" class="form-control @GetValidationClass(nameof(newEvent.Venue))" @bind="newEvent.Venue" />
                    @if (fieldErrors.ContainsKey(nameof(newEvent.Venue)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newEvent.Venue)]</span>
                    }
                </div>
                <div class="form-group">
                    <label>Budget Limit</label>
                    <input type="number" class="form-control @GetValidationClass(nameof(newEvent.BudgetLimit))" @bind="newEvent.BudgetLimit" step="0.01" />
                    @if (fieldErrors.ContainsKey(nameof(newEvent.BudgetLimit)))
                    {
                        <span class="validation-message">@fieldErrors[nameof(newEvent.BudgetLimit)]</span>
                    }
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Create Event</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleCreateForm">Cancel</button>
                </div>
            </form>
        </div>
    }
    
    @if (isLoading)
    {
        <div class="text-center p-4">
            <p>Loading events...</p>
        </div>
    }
    else if (!events.Any())
    {
        <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-calendar-event" viewBox="0 0 16 16">
                <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
                <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
            </svg>
            <h3>No events yet</h3>
            <p>Create your first event to start tracking expenses and managing your budget</p>
        </div>
    }
    else
    {
        <div class="events-list">
            @foreach (var evt in events)
            {
                <div class="event-item">
                    <div class="event-info">
                        <h3>@evt.Name</h3>
                        <p>@evt.Type - @evt.EventDate.ToString("MMM dd, yyyy")</p>
                        <p>Venue: @evt.Venue</p>
                        <p class="budget">Budget: $@evt.BudgetLimit - Spent: $@evt.TotalSpent</p>
                    </div>
                    <div class="event-actions">
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEvent(evt.Id)">Delete</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<EventDto> events = new();
    private bool isLoading = true;
    private bool showCreateForm = false;
    private CreateEventDto newEvent = new();
    private Dictionary<string, string> fieldErrors = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        try
        {
            var result = await EventService.GetAllEventsAsync();
            events = result.ToList();
        }
        catch (Exception)
        {
            // Handle error - in production, show error message to user
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleCreateForm()
    {
        showCreateForm = !showCreateForm;
        if (showCreateForm)
        {
            newEvent = new CreateEventDto
            {
                EventDate = DateTime.Today
            };
            fieldErrors.Clear();
        }
    }

    private async Task CreateEvent()
    {
        fieldErrors.Clear();

        // Client-side validation
        if (string.IsNullOrWhiteSpace(newEvent.Name))
        {
            fieldErrors[nameof(newEvent.Name)] = "Event name is required";
        }

        if (string.IsNullOrWhiteSpace(newEvent.Type))
        {
            fieldErrors[nameof(newEvent.Type)] = "Event type is required";
        }

        if (newEvent.EventDate == default(DateTime))
        {
            fieldErrors[nameof(newEvent.EventDate)] = "Event date is required";
        }

        if (string.IsNullOrWhiteSpace(newEvent.Venue))
        {
            fieldErrors[nameof(newEvent.Venue)] = "Venue is required";
        }

        if (newEvent.BudgetLimit <= 0)
        {
            fieldErrors[nameof(newEvent.BudgetLimit)] = "Budget limit must be greater than zero";
        }

        if (fieldErrors.Any())
        {
            StateHasChanged();
            return;
        }

        try
        {
            await EventService.CreateEventAsync(newEvent);
            await LoadEvents();
            ToggleCreateForm();
        }
        catch (Exception)
        {
            // Handle error - in production, show error message to user
        }
    }

    private async Task DeleteEvent(int id)
    {
        if (confirm("Are you sure you want to delete this event?"))
        {
            try
            {
                await EventService.DeleteEventAsync(id);
                await LoadEvents();
            }
            catch (Exception)
            {
                // Handle error - in production, show error message to user
            }
        }
    }

    private bool confirm(string message)
    {
        // Simple confirmation - in production, use a proper modal
        return true;
    }

    private string GetValidationClass(string fieldName)
    {
        return fieldErrors.ContainsKey(fieldName) ? "is-invalid" : "";
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-header h1 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .page-header p {
        color: #666;
        margin: 0;
    }

    .content-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .card-header h2 {
        margin: 0;
        font-size: 1.5rem;
        color: #333;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #999;
    }

    .empty-state svg {
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .empty-state h3 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: #666;
    }

    .empty-state p {
        color: #999;
    }

    .events-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .event-item {
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .event-info h3 {
        margin: 0 0 0.5rem 0;
        color: #333;
    }

    .event-info p {
        margin: 0.25rem 0;
        color: #666;
        font-size: 0.9rem;
    }

    .event-info p.budget {
        font-weight: 600;
        color: #667eea;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-content h3 {
        margin: 0 0 1.5rem 0;
        color: #333;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
    }

    .form-control.is-invalid {
        border-color: #dc3545;
    }

    .form-control.is-invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    .create-form-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
    }

    .create-form-section h3 {
        margin: 0 0 1.5rem 0;
        color: #333;
    }
</style>
